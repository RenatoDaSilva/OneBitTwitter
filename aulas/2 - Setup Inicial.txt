1- Vá no seu arquivo Gemfile e substitua o conteúdo por:

source 'https://rubygems.org'

git_source(:github) do |repo_name|
  repo_name = "#{repo_name}/#{repo_name}" unless repo_name.include?("/")
  "https://github.com/#{repo_name}.git"
end

# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'
gem 'rails', '~> 5.1.4'
# Use postgresql as the database for Active Record
gem 'pg', '~> 0.18'
# Use Puma as the app server
gem 'puma', '~> 3.7'

# Use Rack CORS for handling Cross-Origin Resource Sharing (CORS), making cross-origin AJAX possible
gem 'rack-cors'

# Use to protect API from external calls
gem 'rack-attack'

# Use Redis adapter to run Action Cable in production
gem 'redis', '~> 3.0'
# Result pagination
gem 'will_paginate', '~> 3.1.0'
# Authorization
gem 'cancancan'
# Follow user
gem 'acts_as_follower', github: 'tcocca/acts_as_follower', branch: 'master'
# Like content
gem 'acts_as_votable', '~> 0.11.1'
# Integration with Searchkick
gem 'searchkick'
# Cron programming
gem 'whenever', :require => false
# Use ActiveModel has_secure_password
gem 'bcrypt', '~> 3.1.7'
# jwt authentication
gem 'knock', '~> 2.1', '>= 2.1.1'
# Serializer json
gem 'active_model_serializers'

group :test do
  # Generate record based in a model
  gem 'factory_bot_rails', "~> 4.0"
  # Fakker datas
  gem "ffaker"
  # Clean db adter test
  gem 'database_cleaner'
end

group :development, :test do
  # Test framework
  gem 'rspec-rails', '~> 3.5'
  # Debbug
  gem 'byebug', platform: :mri
  # Rspec test auxiliar gem
  gem 'rspec-json_expectations'
end

group :development do
  gem 'listen', '>= 3.0.5', '< 3.2' # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring gem 'spring' gem 'spring-watcher-listen', '~> 2.0.0'
end

# Windows does not include zoneinfo files, so bundle the tzinfo-data gem
gem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby]

2- Instale as gems rodando no terminal:

docker-compose run --rm app bundle install

3- Agora vamos instalar o rspec

a- rode no terminal:

docker-compose run --rm app bundle exec rails generate rspec:install

b – Crie uma pasta chamada support dentro da pasta spec

**Obs: Se você tiver problemas com autorização na hora de criar arquivos, rode:

sudo chown -R $USER:$USER .

c – Crie uma pasta chamada factories dentro de spec

d – Agora crie um arquivo chamado factory_bot.rb dentro da pasta support e coloque nele:

RSpec.configure do |config|
  config.include FactoryBot::Syntax::Methods
end

e – Coloque no spec/rails_helper.rb:

Dir[Rails.root.join('spec/support/**/*.rb')].each { |f| require f }

4- Substitua o conteúdo do seu database.yml por:

default: &default
  adapter: postgresql
  encoding: unicode
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  host: postgres
  user: postgres

development:
  <<: *default
  database: one_bit_twitter_development

test:
  <<: *default
  database: one_bit_twitter_test

production:
  <<: *default
  database: one_bit_twitter_production
  username: OneBitTwitter
  password: <%= ENV['ONEBITTWITTER_DATABASE_PASSWORD'] %>

5- Crie o banco de dados rodando:

docker-compose run --rm app bundle exec rake db:create

6- Agora vamos configurar nossas gems acts_as_votable e acts_as_follower

a- No seu terminal rode o comando:

docker-compose run --rm app bundle exec rails generate acts_as_votable:migration

b- Agora rode o comando:

docker-compose run --rm app bundle exec rails generate acts_as_follower

b2 – Na migration gerado substitua a primeira linha por

class ActsAsFollowerMigration < ActiveRecord::Migration[4.2]

c- Rode as migrations para inserir as novas tabelas no banco de dados

docker-compose run --rm app bundle exec rails db:migrate

7- Agora vamos instalar o cancancan

docker-compose run --rm app bundle exec rails g cancan:ability

8- Vamos ajustar a nossa gem de paginação

a – Crie um arquivo em config/initializers chamado will_paginate.rb e coloque nele

require 'will_paginate/array'
WillPaginate.per_page = 15

9 – Crie um arquivo em config/initializers chamado redis.rb e coloque nele

require 'redis'

module DataStore
  def self.redis
    @redis ||= Redis.new(url: 'redis://redis:6379/0')
  end
end
